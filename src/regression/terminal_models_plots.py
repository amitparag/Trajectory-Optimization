"""
For plotting trajectories generated by various terminal models in Crocoddyl.


"""

from valueNetwork import *
from residualNetwork import *
from dataset import Datagen
from plotTrajectories import plot_trajectories
from terminalUnicycle import TerminalUnicycle
import torch
import crocoddyl
import numpy as np


def terminal_crocoddyl(net,starting_positions, stop = 1e-7, maxiters = 1000, name = "FeedForward"):
    """
    Solve crocoddyl using the given terminal network
    
    """
    cost  = []
    iters = []
    traj  = []


    for xyz in starting_positions:
        
        T = 30
        
        model = crocoddyl.ActionModelUnicycle()
        
        # Terminal model for unicycle
        terminal_model = TerminalUnicycle(net)
        
        model.costWeights = np.matrix([1,1]).T
        problem = crocoddyl.ShootingProblem(np.array(xyz).T, [ model ] * T, terminal_model)
        ddp = crocoddyl.SolverDDP(problem)
        ddp.th_stop= stop
        ddp.solve([] , [], maxiters)
        
        
        cost.append(ddp.cost)
        iters.append(ddp.iter)
        
        xs_ = np.array(ddp.xs)
        xs = xs_[:,0:2]
        traj.append(xs)
        
    plot_trajectories(iters, traj, title = f"th_stop = {stop}, max_iters = {maxiters}", name = name)


    
if __name__=='__main__':
    

    datagen  = Datagen()
    starting_positions = datagen.circular_data()
    
    
    fnet = torch.load("valueNet.pth") # Feed Forward net trained on ddp.cost
    rnet = torch.load("resNet.pth")   # Residual net trained on  ddp.cost  
    lnet = torch.load("costNet.pth")  # Feed Forward net trained on x**2
    
    
        
    """
    To plot Crocoddyl solutions with :
                
                1: fnet :  Feedforward network : trained on ddp.cost
                2: rnet :  Residual Network    : trained on ddp.cost
                3: lnet :  Loss Network        : trained on x ** 2
    
    Note: The problem with ddp.th_stop will happen when ddp.th_stop is set to 1e-6 or lower.
    """


    # You can vary ddp.th_stop and max_iterations_allowed through stop and maxiters
    terminal_crocoddyl(fnet,starting_positions, stop = 1e-7, maxiters=1000, name = "Feed Forward Net")
    terminal_crocoddyl(rnet,starting_positions, stop = 1e-7, maxiters=1000, name = "Residual Net")
    terminal_crocoddyl(lnet,starting_positions, stop = 1e-7, maxiters=1000, name = "Loss Net")
